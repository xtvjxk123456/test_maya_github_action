// World-view-projection transformation.
uniform mat4 gWVPXf : WorldViewProjection;

// Target size.
uniform vec2 gTargetSize : ViewportPixelSize;

// The single filter input, i.e. the image to be filtered.
uniform texture2D gInputTex : InputTexture;

// Filter input sampler.
uniform sampler2D gInputSamp = sampler_state
{
    Texture = <gInputTex>;
    //MinFilter = Point;
    //MagFilter = Point;
    //MipFilter = Point;
};


// Vertex shader input structure.
attribute VS_INPUT
{
    vec4 Pos : POSITION;
    vec2 UV : TEXCOORD0;
};

// Vertex shader output structure.
attribute VS_TO_PS
{
    vec2 VSUV : TEXCOORD0;
};

// Vertex shader.
GLSLShader VS_FilterEdgeDetect
{
	void main()
	{
        gl_Position = gWVPXf*Pos;
		
		// Pass the texture coordinates unchanged.
		VSUV = UV;
	}
}

//Pixel shader output structure.
uniform vec3 radialDistortionParams;
uniform vec2 tangentialDistortionParams;
uniform float k;

// Pixel shader output structure.
attribute pixelOut
{
    vec4 FragColor: COLOR0;
}


GLSLShader PS_FilterEdgeDetect
{

    vec2 arnold_distort(vec2 coord, float k) {
            float r = length(coord);
            float distortion_factor = 1.0 + k * pow(r, 2);
            float d_x =  coord.x/distortion_factor;
            float d_y =  coord.y/distortion_factor;
            return vec2(d_x,d_y);
        }

    void main() {
        vec2 coords = VSUV * 2.0 - 1.0;

        vec2 distortedCoord =  arnold_distort(coords,k);

        distortedCoord = (distortedCoord + 1.0) / 2.0;

        // Sample the texture with the distorted coordinates
        if (distortedCoord.x<0.0 || distortedCoord.x>1.0 ||distortedCoord.y<0.0 ||distortedCoord.y>1.0){
            FragColor =  vec4(0,0,0,0);
        }
        else
        {
            FragColor = texture2D(gInputSamp, distortedCoord);
        }
        
    }

}

// The main technique.
technique Main
{
    pass p0
    {
        VertexShader (in VS_INPUT, out VS_TO_PS) = VS_FilterEdgeDetect;
        PixelShader (in VS_TO_PS, out pixelOut) = PS_FilterEdgeDetect;
    }
}
